// src/api/mentor/controllers/QuestionMentorAPI.ts
import api from '../../api';
import { QuestionContentCreateDTO, QuestionCreateDTO, QuestionResponseDTO } from '../../dtos/questionDtos';

// Define Option interface (adjust fields based on your backend entity)
interface Option {
  id?: string; // Optional since it might be generated by backend
  text: string;
  isCorrect: boolean;
}

export class QuestionMentorAPI {
  /**
   * Gets all questions for the authenticated mentor (mentor only)
   * @returns Promise containing array of question DTOs
   */
  static async getAllQuestions(): Promise<QuestionResponseDTO[]> {
    try {
      const response = await api.get<QuestionResponseDTO[]>('/api/mentor/questions');
      return response.data;
    } catch (error) {
      console.error('Error fetching all questions:', error);
      throw error;
    }
  }

  /**
   * Gets a question by ID for the authenticated mentor (mentor only)
   * @param id Question ID
   * @returns Promise containing question DTO
   */
  static async getQuestionById(id: string): Promise<QuestionResponseDTO> {
    try {
      const response = await api.get<QuestionResponseDTO>(`/api/mentor/questions/${id}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching question by ID:', error);
      throw error;
    }
  }

  /**
   * Creates a new question for the authenticated mentor (mentor only)
   * @param question Question creation data
   * @returns Promise containing created question DTO
   */
  static async createQuestion(question: QuestionCreateDTO): Promise<QuestionResponseDTO> {
    try {
      const response = await api.post<QuestionResponseDTO>('/api/mentor/questions', question);
      return response.data;
    } catch (error) {
      console.error('Error creating question:', error);
      throw error;
    }
  }

  /**
   * Updates an existing question for the authenticated mentor (mentor only)
   * @param id Question ID
   * @param question Question update data
   * @returns Promise containing updated question DTO
   */
  static async updateQuestion(id: string, question: QuestionCreateDTO): Promise<QuestionResponseDTO> {
    try {
      const response = await api.put<QuestionResponseDTO>(`/api/mentor/questions/${id}`, question);
      return response.data;
    } catch (error) {
      console.error('Error updating question:', error);
      throw error;
    }
  }

  /**
   * Deletes a question for the authenticated mentor (mentor only)
   * @param id Question ID
   * @returns Promise containing void
   */
  static async deleteQuestion(id: string): Promise<void> {
    try {
      await api.delete(`/api/mentor/questions/${id}`);
    } catch (error) {
      console.error('Error deleting question:', error);
      throw error;
    }
  }

  /**
   * Adds options to a question (mentor only)
   * @param id Question ID
   * @param options Options to add
   * @returns Promise containing updated question DTO
   */
  static async addOptions(id: string, options: Set<Option>): Promise<QuestionResponseDTO> {
    try {
      const response = await api.post<QuestionResponseDTO>(`/api/mentor/questions/${id}/options`, Array.from(options));
      return response.data;
    } catch (error) {
      console.error('Error adding options to question:', error);
      throw error;
    }
  }

  /**
   * Updates an option for a question (mentor only)
   * @param questionId Question ID
   * @param optionId Option ID
   * @param option Option update data
   * @returns Promise containing updated question DTO
   */
  static async updateOption(questionId: string, optionId: string, option: Option): Promise<QuestionResponseDTO> {
    try {
      const response = await api.put<QuestionResponseDTO>(`/api/mentor/questions/${questionId}/options/${optionId}`, option);
      return response.data;
    } catch (error) {
      console.error('Error updating option:', error);
      throw error;
    }
  }

  /**
   * Deletes an option from a question (mentor only)
   * @param questionId Question ID
   * @param optionId Option ID
   * @returns Promise containing updated question DTO
   */
  static async deleteOption(questionId: string, optionId: string): Promise<QuestionResponseDTO> {
    try {
      const response = await api.delete<QuestionResponseDTO>(`/api/mentor/questions/${questionId}/options/${optionId}`);
      return response.data;
    } catch (error) {
      console.error('Error deleting option:', error);
      throw error;
    }
  }

  static async getSuperAdminQuestions(): Promise<QuestionResponseDTO[]> {
    try {
      const response = await api.get<QuestionResponseDTO[]>('/api/mentor/questions/superadmin');
      return response.data;
    } catch (error) {
      console.error('Error fetching superadmin questions:', error);
      throw error;
    }
  }

  /**
   * Updates the content of an existing question (mentor only)
   * @param id Question ID
   * @param content List of content items to update/create
   * @returns Promise containing updated question DTO
   */
  static async updateQuestionContent(id: string, content: QuestionContentCreateDTO[]): Promise<QuestionResponseDTO> {
    try {
      const response = await api.put<QuestionResponseDTO>(`/api/mentor/questions/${id}/content`, content);
      return response.data;
    } catch (error) {
      console.error('Error updating question content:', error);
      throw error;
    }
  }
}

// Usage example:
/*
async function handleQuestionMentorOperations() {
  try {
    // Get all questions
    const allQuestions = await QuestionMentorAPI.getAllQuestions();
    console.log('All questions:', allQuestions);

    // Create new question
    const newQuestion: QuestionCreateDTO = {
      text: "What is 2 + 2?",
      courseId: "course123",
      categoryId: "category456"
    };
    const createdQuestion = await QuestionMentorAPI.createQuestion(newQuestion);
    console.log('Created question:', createdQuestion);

    // Get specific question
    const question = await QuestionMentorAPI.getQuestionById(createdQuestion.id);
    console.log('Question:', question);

    // Update question
    const updatedQuestion = await QuestionMentorAPI.updateQuestion(createdQuestion.id, {
      ...newQuestion,
      text: "What is 3 + 3?"
    });
    console.log('Updated question:', updatedQuestion);

    // Add options
    const options = new Set<Option>([
      { text: "4", isCorrect: true },
      { text: "5", isCorrect: false }
    ]);
    const questionWithOptions = await QuestionMentorAPI.addOptions(createdQuestion.id, options);
    console.log('Question with options:', questionWithOptions);

    // Assuming the backend returns option IDs in the response
    const optionId = questionWithOptions.options.values().next().value.id; // Adjust based on actual response
    const updatedOption = await QuestionMentorAPI.updateOption(createdQuestion.id, optionId, {
      text: "6",
      isCorrect: false
    });
    console.log('Updated option:', updatedOption);

    // Delete option
    const questionWithoutOption = await QuestionMentorAPI.deleteOption(createdQuestion.id, optionId);
    console.log('Question without option:', questionWithoutOption);

    // Delete question
    await QuestionMentorAPI.deleteQuestion(createdQuestion.id);
    console.log('Question deleted successfully');
  } catch (error) {
    console.error('Question mentor operation failed:', error);
  }
}
*/