import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { useNavigate, useParams } from "react-router-dom"
import { Calendar } from "@/components/ui/calendar"
import { useState, useEffect } from "react"
import { toast } from "sonner"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog"
import { format } from "date-fns"
import { ptBR } from "date-fns/locale"
import { TutorSessionStudentAPI } from "@/api/student/controllers/TutorSessionStudentAPI"
import { TutorSessionCreateDTO, SessionType, TutorSessionResponseDTO } from "@/api/dtos/tutorSessionDtos"
import { UserStudentAPI } from "@/api/student/controllers/UserStudentAPI"
import { UserResponseDTO } from "@/api/dtos/userDtos"

const ScheduleMentoring = () => {
  const { id } = useParams()
  const navigate = useNavigate()
  const [mentor, setMentor] = useState<UserResponseDTO | null>(null)
  const [selectedDate, setSelectedDate] = useState<Date>()
  const [selectedTime, setSelectedTime] = useState<string>()
  const [showConfirmDialog, setShowConfirmDialog] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [availableTimeSlots, setAvailableTimeSlots] = useState<string[]>([])
  const [bookedTimeSlots, setBookedTimeSlots] = useState<string[]>([])

  useEffect(() => {
    const fetchMentor = async () => {
      try {
        setIsLoading(true)
        const mentors = await UserStudentAPI.findAvailableMentors()
        const selectedMentor = mentors.find(m => m.id === id)
        
        if (selectedMentor) {
          setMentor(selectedMentor)
          if (selectedMentor.horarios && selectedMentor.horarios.length > 0) {
            setAvailableTimeSlots(selectedMentor.horarios)
          } else {
            toast.error("Nenhum horário disponível para este mentor")
          }
        } else {
          toast.error("Mentor não encontrado")
        }
      } catch (error) {
        toast.error("Erro ao carregar informações do mentor")
        console.error('Error fetching mentor:', error)
      } finally {
        setIsLoading(false)
      }
    }

    if (id) {
      fetchMentor()
    }
  }, [id])

  useEffect(() => {
    const fetchBookedSessions = async () => {
      if (!mentor || !selectedDate) return

      try {
        const formattedDate = format(selectedDate, "yyyy-MM-dd")
        const sessions = await TutorSessionStudentAPI.getSessionsByMentorAndDate(mentor.id, formattedDate)
        const bookedTimes = sessions.map((session: TutorSessionResponseDTO) => session.dateHour)
        setBookedTimeSlots(bookedTimes)
      } catch (error) {
        console.error('Error fetching booked sessions:', error)
        toast.error("Erro ao carregar horários ocupados")
      }
    }

    fetchBookedSessions()
  }, [selectedDate, mentor])

  const handleSchedule = () => {
    if (!selectedDate || !selectedTime) {
      toast.error("Selecione uma data e horário")
      return
    }
    setShowConfirmDialog(true)
  }

  const handleConfirmSchedule = async () => {
    if (!selectedDate || !selectedTime || !mentor) {
      toast.error("Informações incompletas para agendamento")
      return
    }

    setIsSubmitting(true)
    try {
      const sessionDTO: TutorSessionCreateDTO = {
        mentorId: mentor.id,
        title: `Mentoria com ${mentor.name}`,
        date: format(selectedDate, "yyyy-MM-dd"),
        dateHour: selectedTime, // Using string format HH:mm
        type: SessionType.CHAMADA_DE_VIDEO,
        link: "", // Will be generated by backend
        studentId: "" // Will be set by backend based on authenticated user
      }

      await TutorSessionStudentAPI.requestTutorSession(sessionDTO)
      toast.success("Mentoria agendada com sucesso!")
      setShowConfirmDialog(false)
      navigate("/dashboard/mentoria")
    } catch (error) {
      toast.error("Erro ao agendar mentoria")
      console.error('Schedule error:', error)
    } finally {
      setIsSubmitting(false)
    }
  }

  const disablePastDates = (date: Date) => {
    const today = new Date()
    today.setHours(0, 0, 0, 0)
    return date < today
  }

  if (isLoading) {
    return (
      <div className="container py-8">
        <p>Carregando informações do mentor...</p>
      </div>
    )
  }

  if (!mentor) {
    return (
      <div className="container py-8">
        <h1 className="text-3xl font-bold">Mentor não encontrado</h1>
        <p className="text-muted-foreground">O mentor selecionado não está disponível</p>
        <Button 
          className="mt-4" 
          variant="outline" 
          onClick={() => navigate("/mentores")}
        >
          Voltar para lista de mentores
        </Button>
      </div>
    )
  }

  return (
    <div className="container py-8 space-y-8">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">Agendar Mentoria</h1>
          <p className="text-muted-foreground">
            Escolha um horário com {mentor.name}
          </p>
        </div>
        <Button variant="outline" onClick={() => navigate("/mentores")}>
          Voltar
        </Button>
      </div>

      <div className="grid gap-8 md:grid-cols-2">
        <Card className="p-6 bg-background">
          <h3 className="text-lg font-semibold mb-4">Selecione uma data</h3>
          <Calendar
            mode="single"
            selected={selectedDate}
            onSelect={setSelectedDate}
            className="rounded-md border"
            disabled={disablePastDates}
            locale={ptBR}
          />
        </Card>

        <Card className="p-6 bg-background">
          <h3 className="text-lg font-semibold mb-4">Horários Disponíveis</h3>
          {selectedDate ? (
            <>
              <div className="grid grid-cols-2 gap-4">
                {availableTimeSlots.map((time) => (
                  <Button
                    key={time}
                    variant={selectedTime === time ? "default" : "outline"}
                    className="w-full"
                    onClick={() => setSelectedTime(time)}
                    disabled={bookedTimeSlots.includes(time)}
                  >
                    {time}
                  </Button>
                ))}
              </div>
              <Button 
                className="w-full mt-8"
                onClick={handleSchedule}
                disabled={!selectedTime || isSubmitting}
              >
                Agendar Mentoria
              </Button>
            </>
          ) : (
            <p className="text-muted-foreground">Selecione uma data para ver os horários disponíveis</p>
          )}
        </Card>
      </div>

      <Dialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirmar Agendamento</DialogTitle>
          </DialogHeader>
          <div className="py-4 space-y-2">
            <p>Deseja confirmar o agendamento da mentoria com {mentor.name}?</p>
            {selectedDate && (
              <p className="text-muted-foreground">
                Data: {format(selectedDate, "dd 'de' MMMM 'de' yyyy", { locale: ptBR })}
              </p>
            )}
            {selectedTime && (
              <p className="text-muted-foreground">
                Horário: {selectedTime}
              </p>
            )}
          </div>
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setShowConfirmDialog(false)}
              disabled={isSubmitting}
            >
              Cancelar
            </Button>
            <Button 
              onClick={handleConfirmSchedule}
              disabled={isSubmitting}
            >
              {isSubmitting ? "Agendando..." : "Confirmar Agendamento"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

export default ScheduleMentoring